S.eigen <- eigen(S)
suppressPackageStartupMessages({
library(readr)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(ggrepel)
library(pheatmap)
})
theme_set(theme_cowplot())
options(repr.plot.width=9,repr.plot.height=7)
df <- read.csv('darlingtonia_californica.csv')
head(df)
df.pca <- df %>%
select(-c(site, plant))
df.pca
str(df.pca)
plot <- df %>%
gather(variable, value, -site) %>%
ggplot(aes(sample = value, color = variable)) +
geom_abline() +
stat_qq()
# All in one
plot
scaled.df <- scale(df.pca)
S <- cov(scaled.df)
S
library(corrplot)
corrplot(S, method="circle")
S.eigen <- eigen(S)
S.eigen$values %>% round(3) # Eigenvalues
sum(S.eigen$values)
S.eigen.prop <- S.eigen$values / sum(S.eigen$values)
S.eigen.prop %>% round(3) # rounding for display
S.eigen$vectors %>% round(2) # 1 vector per eigenvalue
loadings <- S.eigen$vectors[ , 1:3] %>%
data.frame(row.names = colnames(darl.data)) %>%
rename("PC1" = X1, "PC2" = X2, "PC3" = X3) %>%
round(digits = 3)
loadings <- S.eigen$vectors[ , 1:3] %>%
data.frame(row.names = colnames(scaled.df)) %>%
rename("PC1" = X1, "PC2" = X2, "PC3" = X3) %>%
round(digits = 3)
loadings
PC1 <- scaled.data %*% S.eigen$vectors[,1]
PC1 <- scaled.df %*% S.eigen$vectors[,1]
PC1 %>% head()
PC.scores <- scaled.df %*% S.eigen$vectors
cor(PC.scores) %>% round(3)
df1.pca <- princomp(df.pca, cor = TRUE)
summary(df1.pca, loadings = TRUE, cutoff = 0)
plot(darl.PCA)
plot(df1.pca)
df2.pca <- prcomp(df.pca, scale. = TRUE) # Note scale. argument
print(df2.pca)
install.packages("ggvegan")
install.packages("pheatmap")
if (!require(devtools)) {
install.packages("devtools")
}
devtools::install_github("gavinsimpson/ggvegan")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("gavinsimpson/ggvegan")
install.packages("roxygen2")
install.packages("roxygen2")
R.home()
install.packages("devtools")
R.home()
ls()
wd(pkg = "devtools", path = "/opt/R/4.1.3/lib/R/library")
> .libPaths()
.libPaths()
install.packages("devtools", lib="/opt/R/4.1.3/lib/R/library")
1 + 1
suppressPackageStartupMessages({
library(readr)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(ggrepel)
library(pheatmap)
})
theme_set(theme_cowplot())
options(repr.plot.width=9,repr.plot.height=7)
df <- read.csv('darlingtonia_californica.csv')
head(df)
df.pca <- df %>%
select(-c(site, plant))
df.pca
str(df.pca)
data_long <- pivot_longer(data, cols = c(insert columns you want),
#data_long <- pivot_longer(data, cols = c(insert columns you want),
names_to = 'key')
#data_long <- pivot_longer(data, cols = c(insert columns you want),names_to = 'key')
The
#The
#The
#The data should be approximately normally distributed
#The
plot <- df %>%
gather(variable, value, -site) %>%
ggplot(aes(sample = value, color = variable)) +
geom_abline() +
stat_qq()
# All in one
plot
scaled.df <- scale(df.pca)
S <- cov(scaled.df)
S
library(corrplot)
corrplot(S, method="circle")
S.eigen <- eigen(S)
S.eigen$values %>% round(3) # Eigenvalues
sum(S.eigen$values)
S.eigen.prop <- S.eigen$values / sum(S.eigen$values)
S.eigen.prop %>% round(3) # rounding for display
S.eigen$vectors %>% round(2) # 1 vector per eigenvalue
loadings <- S.eigen$vectors[ , 1:3] %>%
data.frame(row.names = colnames(scaled.df)) %>%
rename("PC1" = X1, "PC2" = X2, "PC3" = X3) %>%
round(digits = 3)
loadings
PC1 <- scaled.df %*% S.eigen$vectors[,1]
PC1 %>% head()
PC.scores <- scaled.df %*% S.eigen$vectors
cor(PC.scores) %>% round(3)
ggplot(mpg, aes(cty, hwy)) + geom_point() + geom_abline() + lims(x = c(0,35), y = c(0,50))
var_explained_df %>%
ggplot(aes(x=PC,y=var_explained))+
geom_col()+
labs(title="Scree plot: PCA on scaled data")
#The
#The
#The data should be approximately normally distributed
#The
plot <- df %>%
gather(variable, value, -site) %>%
ggplot(aes(sample = value, color = variable)) +
geom_abline() +
stat_qq()
# All in one
plot
scaled.df <- scale(df.pca)
S <- cov(scaled.df)
S
library(corrplot)
corrplot(S, method="circle")
S.eigen <- eigen(S)
S.eigen$values %>% round(3) # Eigenvalues
sum(S.eigen$values)
S.eigen.prop <- S.eigen$values / sum(S.eigen$values)
S.eigen.prop %>% round(3) # rounding for display
S.eigen$vectors %>% round(2) # 1 vector per eigenvalue
loadings <- S.eigen$vectors[ , 1:3] %>%
data.frame(row.names = colnames(scaled.df)) %>%
rename("PC1" = X1, "PC2" = X2, "PC3" = X3) %>%
round(digits = 3)
loadings
PC1 <- scaled.df %*% S.eigen$vectors[,1]
PC1 %>% head()
PC.scores <- scaled.df %*% S.eigen$vectors
cor(PC.scores) %>% round(3)
ggplot(mpg, aes(cty, hwy)) + geom_point() + geom_abline() + lims(x = c(0,35), y = c(0,50))
var_explained_df %>%
ggplot(aes(x=PC,y=var_explained))+
geom_col()+
labs(title="Scree plot: PCA on scaled data")
ggplot(mpg, aes(cty, hwy)) + geom_point() + geom_abline() + lims(x = c(0,35), y = c(0,50))
var_explained_df %>%
ggplot(aes(x=PC,y=var_explained))+
geom_col()+
labs(title="Scree plot: PCA on scaled data")
df1.pca <- princomp(df.pca, cor = TRUE)
summary(df1.pca, loadings = TRUE, cutoff = 0)
plot(df1.pca)
df2.pca <- prcomp(df.pca, scale. = TRUE) # Note scale. argument
print(df2.pca)
df.pca.scores <- data.frame(darl.PCA$scores,
site = darl$site)
biplot(df.pca)
biplot(df1.pca)
install.packages("ggbiplot")
library(ggbiplot)
ggbiplot(df1.pca, labels =  rownames(df1.pca))
ggbiplot(df1.pca, labels =  rownames(df))
ggbiplot(df1.pca)
ggbiplot(df.pca)
ggbiplot(df1.pca)
#ggbiplot(df1.pca)
fviz_pca_biplot(df1.pca)
install.packages("ggfortify")
library(ggbiplot)
library(ggfortify)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca, label = TRUE, loadings.label = TRUE)
ggbiplot(df1.pca, obs.scale = 1, var.scale = 1,
groups = df1.class, ellipse = TRUE, circle = TRUE)
ggbiplot(df1.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE)
ggbiplot(df1.pca, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE)
ggbiplot(df1.pca,ellipse = TRUE, circle = TRUE)
ggbiplot(df1.pca, circle = TRUE)
ggbiplot(df1.pca, )
ggbiplot(df1.pca)
ggbiplot(df1.pca) +
geom_point(aes(colour = df$site)) +
labs(colour = "Site", x = "PC1(Size; 44.4%)", y = "PC2 (Shape; 17.7%)") +
theme_bw()
ggbiplot(df1.pca) +
geom_point(aes(colour = df$site)) +
labs(colour = "Site", x = "PC1(Size; 44.4%)", y = "PC2 (Shape; 17.7%)") +
theme_bw()
ggbiplot(df1.pca) +
geom_point(aes(colour = df1$site)) +
labs(colour = "Site", x = "PC1(Size; 44.4%)", y = "PC2 (Shape; 17.7%)") +
theme_bw()
ggbiplot(df1.pca) +
#geom_point(aes(colour = df$site)) +
labs(colour = "Site", x = "PC1(Size; 44.4%)", y = "PC2 (Shape; 17.7%)") +
theme_bw()
df1.pca <- princomp(df.pca, center = TRUE, scale. = TRUE,cor = TRUE)
df1.pca <- prcomp(df.pca, center = TRUE, scale. = TRUE,cor = TRUE)
df1.pca <- prcomp(df.pca, center = TRUE, scale. = TRUE)
summary(df1.pca, loadings = TRUE, cutoff = 0)
summary(df1.pca, loadings = TRUE)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca, aes(), label = TRUE, loadings.label = TRUE)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca,  label = TRUE, loadings.label = TRUE)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca,  label = TRUE, loadings.label = TRUE)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca,  label = TRUE, loadings.label = TRUE)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca,  label = TRUE, loadings.label = TRUE)
ggbiplot(df1.pca)
df.pca.scores <- data.frame(df1.pca$scores,
site = darl$site)
df.pca.scores <- data.frame(df1.pca$scores,
site = df$site)
1 + 1
suppressPackageStartupMessages({
library(readr)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(ggrepel)
library(pheatmap)
})
theme_set(theme_cowplot())
options(repr.plot.width=9,repr.plot.height=7)
df <- read.csv('darlingtonia_californica.csv')
head(df)
df.pca <- df %>%
select(-c(site, plant))
df.pca
str(df.pca)
#data_long <- pivot_longer(data, cols = c(insert columns you want),names_to = 'key')
#The
#The
#The data should be approximately normally distributed
#The
plot <- df %>%
gather(variable, value, -site) %>%
ggplot(aes(sample = value, color = variable)) +
geom_abline() +
stat_qq()
# All in one
plot
scaled.df <- scale(df.pca)
S <- cov(scaled.df)
S
library(corrplot)
corrplot(S, method="circle")
S.eigen <- eigen(S)
S.eigen$values %>% round(3) # Eigenvalues
sum(S.eigen$values)
S.eigen.prop <- S.eigen$values / sum(S.eigen$values)
S.eigen.prop %>% round(3) # rounding for display
S.eigen$vectors %>% round(2) # 1 vector per eigenvalue
loadings <- S.eigen$vectors[ , 1:3] %>%
data.frame(row.names = colnames(scaled.df)) %>%
rename("PC1" = X1, "PC2" = X2, "PC3" = X3) %>%
round(digits = 3)
loadings
PC1 <- scaled.df %*% S.eigen$vectors[,1]
PC1 %>% head()
PC.scores <- scaled.df %*% S.eigen$vectors
cor(PC.scores) %>% round(3)
df1.pca <- princomp(df.pca, cor = TRUE)
summary(df1.pca, loadings = TRUE, cutoff = 0)
plot(df1.pca)
df2.pca <- prcomp(df.pca, scale. = TRUE) # Note scale. argument
print(df2.pca)
biplot(df1.pca)
library(ggbiplot)
library(ggfortify)
#ggbiplot(df1.pca)
ggplot2::autoplot(df1.pca,  label = TRUE, loadings.label = TRUE)
ggbiplot(df1.pca) +
#geom_point(aes(colour = df$site)) +
labs(colour = "Site", x = "PC1(Size; 44.4%)", y = "PC2 (Shape; 17.7%)") +
theme_bw()
ggbiplot(df1.pca)
