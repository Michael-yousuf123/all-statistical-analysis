library(readr, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(lubridate, quietly = TRUE)
library(pwr, quietly = TRUE)
library(plyr, quietly = TRUE)
getwd()
df = read_csv("/home/miki/Desktop/Miki/R/all-statistical-analysis/ABtest/Cookie_Cats_cleaned_v01.csv")
spec(df)
distinct(df,userid,.keep_all = TRUE)
?!
!
?
if (duplicated(df)){
df[duplicated(df),]
}
if (duplicated(df)){
df[duplicated(df),]
}else if{
if (duplicated(df)){
print(df[duplicated(df),])
}else if{
print(df[duplicated(df),])
#print(df[duplicated(df),])
duplicated(df)
#print(df[duplicated(df),])
if (duplicated(df)){
print("Yes")
}else if{
#print(df[duplicated(df),])
if (duplicated(df)){
print("Yes")
}
#print(df[duplicated(df),])
if (duplicated(df)) {
print("b is greater than a")
} else {
print("b is not greater than a")
}
#print(df[duplicated(df),])
if (duplicated(df)) {
print("b is greater than a")
}
#print(df[duplicated(df),])
df <- df[!duplicated(df, fromLast = T), ]
head(df)
which(is.na(df))
summary(df)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
df$sum_gamerounds.skew()
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
x
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
x.skew()
?skew()
install.packages("e1071")
library(e1071)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
x.skew()
library(e1071)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
?skew()
library(e1071)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
kurtosis(x)
library(e1071)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
#x <- df[,3, drop=FALSE]
#x.skew()
kurtosis(df)
install.packages("moments")
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
#x <- df[,3, drop=FALSE]
#x.skew()
skewness(df)
?skewness
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = FALSE)
#skewness(df)
#kurtosis(df)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
#x <- df[,3, drop=FALSE]
#x.skew()
skewness(df, na.rm = FALSE)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
#x <- df[,3, drop=FALSE]
#x.skew()
skewness(df, na.rm = TRUE)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
hist(x, col='steelblue')
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
#hist(x, col='steelblue')
hist(df)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
#hist(x, col='steelblue')
hist(df$sum_gamerounds)
#abline(v = mx, col = "blue", lwd = 2)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
#hist(x, col='steelblue')
mx <- mean(df$sum_gamerounds)
hist(df$sum_gamerounds)
#abline(v = mx, col = "blue", lwd = 2)
library(moments)
##userid = col_double(),
#version = col_character(),
#sum_gamerounds = col_double(),
#retention_1 = col_logical(),
#retention_7 = col_logical()
#df$sum_gamerounds.skew()
#data_dis.kurtosis()
x <- df[,3, drop=FALSE]
#x.skew()
skewness(x, na.rm = TRUE)
kurtosis(x, na.rm = TRUE)
#skewness(df)
#kurtosis(df)
#hist(x, col='steelblue')
mx <- mean(df$sum_gamerounds)
hist(df$sum_gamerounds)
abline(v = mx, col = "blue", lwd = 2)
library(tidyverse)
df%>%
freq_table(retention_1)
df %>%
count(retention_1, retention_7) %>%
group_by(retention_1) %>%
mutate(n = n/sum(n) * 100) %>%
tidyr::pivot_wider(names_from = retention_7, values_from = n,
values_fill = list(n = 0))
df %>%
count(retention_1, retention_7) %>%
group_by(retention_1) %>%
mutate(n = n/sum(n) * 100) %>%
tidyr::pivot_wider(names_from = retention_1, values_from = n,
values_fill = list(n = 0))
df %>%
count(retention_7, retention_7) %>%
group_by(retention_1) %>%
mutate(n = n/sum(n) * 100) %>%
tidyr::pivot_wider(names_from = retention_1, values_from = n,
values_fill = list(n = 0))
# Use the table() function to get the counts of each species
group_counts <- table(df$retention_7)
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Divide each count by the total count and multiply by 100 to get the percentage
percentage_by_group <- (group_counts / total_count) * 100
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Divide each count by the total count and multiply by 100 to get the percentage
percentage_by_group <- (group_counts / total_count) * 100
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Divide each count by the total count and multiply by 100 to get the percentage
percentage_by_group <- (group_counts / total_count) * 100
percentage_by_group
# Use the table() function to get the counts of each species
group_counts <- table(df$retention_7)
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Divide each count by the total count and multiply by 100 to get the percentage
percentage_by_group <- (group_counts / total_count) * 100
percentage_by_group
# Use the table() function to get the counts of each species
group_counts <- table(df$retention_1)
# Calculate the total count using the sum() function
total_count <- sum(group_counts)
# Divide each count by the total count and multiply by 100 to get the percentage
percentage_by_group <- (group_counts / total_count) * 100
percentage_by_group
# Create a cross-tabulation using the table() function
crosstab <- table(df$retention_1,
df$retention_7)
# Print the cross-tabulation
print(crosstab)
# Create a cross-tabulation using the table() function
crosstab <- table(df$version,
df$retention_7)
# Print the cross-tabulation
print(crosstab)
?quantile()
q()
